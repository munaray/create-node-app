import fs from "fs";

export const createBasicFiles = (
  projectName: string,
  useTypescript: boolean
) => {
  if (useTypescript) {
    fs.writeFileSync(
      "tsconfig.json",
      JSON.stringify(
        {
          compilerOptions: {
            target: "ES2020",
            module: "commonjs",
            strict: true,
            esModuleInterop: true,
            skipLibCheck: true,
            forceConsistentCasingInFileNames: true,
            outDir: "./build",
            baseUrl: "./",
            paths: {
              "@/*": ["src/*"],
            },
          },
          include: ["src/**/*.ts"],
          exclude: ["node_modules", "build"],
        },
        null,
        2
      )
    );
  }

  fs.writeFileSync(
    "package.json",
    useTypescript
      ? JSON.stringify(
          {
            name: `${projectName}`,
            version: "1.0.0",
            main: "server.js",
            module: "NodeNext",
            scripts: {
              build: "tsc --build",
              start: "node ./build/server.js",
              dev: "nodemon ./src/server.ts",
              lint: "eslint",
            },
            keywords: [],
            author: "",
            license: "ISC",
            description: "",
          },
          null,
          2
        )
      : JSON.stringify(
          {
            name: `${projectName}`,
            description: "",
            version: "1.0.0",
            main: "server.js",
            type: "module",
            scripts: {
              start: "node ./build/server.js",
              dev: "nodemon ./src/server.js",
              lint: "eslint",
            },
            keywords: [],
            author: "",
            license: "ISC",
          },
          null,
          2
        )
  );

  fs.writeFileSync(
    ".env.sample",
    `
PORT = 5000
ORIGIN = ["http://localhost:5000"]

NODE_DEV = development

// For MongoDB database
MONGODB_URL =

// For MySQL or PostgreSQL
DATABASE_URL =
DATABASE_PASSWORD =

// Redis for caching
REDIS_URL =

// JWT for secure authentication
JWT_ACTIVATION_SECRET =
JWT_ACCESS_TOKEN =
JWT_ACCESS_TOKEN_EXPIRE =
JWT_REFRESH_TOKEN =
JWT_REFRESH_TOKEN_EXPIRE =

// Sending mail using nodemailer
SMTP_HOST =
SMTP_PORT =
SMTP_SERVICES =
SMTP_MAIL =
SMTP_PASSWORD =
        `
  );
  fs.writeFileSync(
    ".gitignore",
    `# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist/
build/
# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*
    `
  );
  fs.writeFileSync(
    ".prettierrc.json",
    JSON.stringify(
      {
        semi: true,
        singleQuote: false,
        tabWidth: 2,
        trailingComma: "es5",
        printWidth: 80,
      },
      null,
      2
    )
  );

  fs.writeFileSync(
    "README.md",
    `# ${projectName}

This is a Node.js project generated with **Create Node App CLI**.

## Getting Started

To get started with this project, follow these steps:

1. **Install dependencies**:

   \`\`\`bash
   npm install
   # or
   yarn install
   # or
   pnpm install
   \`\`\`

2. **Run the development server**:

   \`\`\`bash
   npm run dev
   # or
   yarn dev
   # or
   pnpm dev
   \`\`\`

   Open [http://localhost:3000/test](http://localhost:3000/tset) with your browser to see the result.

You can start editing the project by modifying the files inside the \`src/\` directory. The server will auto-reload when you save your changes.

## Project Structure

The project is structured as follows:

\`\`\`
${projectName}/
│
├── src/
│   ├── controllers/
│   ├── routes/
│   ├── middleware/
│   ├── services/
│   ├── swagger-docs/
│   │   ├── swagger-api-docs/
│   │   └── swagger-schema-docs/
│   └── utils/
│
├── .env.sample
├── .gitignore
├── package.json
├── tsconfig.json (if using TypeScript)
└── README.md
\`\`\`

## Available Scripts

Here are some useful npm scripts to help you manage the project:

- **Start the development server**:
  \`\`\`bash
  npm run dev
  \`\`\`

- **Build the project**:
  \`\`\`bash
  npm run build
  \`\`\`

- **Lint your code**:
  \`\`\`bash
  npm run lint
  \`\`\`

## Learn More

To learn more about Node.js or the frameworks used in this project, take a look at the following resources:

- [Node.js Documentation](https://nodejs.org/en/docs/)
- [Express Documentation](https://expressjs.com/) (or Fastify/Nest, depending on the framework chosen)

## Contributing

Contributions are welcome! If you find any issues or have suggestions to improve this project, feel free to open an issue or submit a pull request.

---

This project is licensed under the MIT License.
`
  );
};
